import {expect} from 'chai'
import {stripIndent} from 'common-tags'

import {ReactTypeScriptGenerator} from '../../../src/codegen/code-generators/react-typescript-generator.js'
import {type ConfigFile} from '../../../src/codegen/types.js'

const mockLog: (category: string | unknown, message?: unknown) => void = () => {}
const defaultMockConfigFile: ConfigFile = {
  configs: [],
}

describe('ReactTypeScriptGenerator', () => {
  describe('declarationGenerate', () => {
    it('should generate basic code structure when no configs exist', () => {
      const generator = new ReactTypeScriptGenerator({
        configFile: defaultMockConfigFile,
        log: mockLog,
      })

      const result = generator.declarationGenerate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import "@reforge-com/javascript";
      // prettier-ignore
      import "@reforge-com/react";

      // prettier-ignore
      declare module "@reforge-com/javascript" {
        export interface FrontEndConfigurationRaw {
          // No types generated
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationRaw = FrontEndConfigurationRaw;
      }

      // prettier-ignore
      declare module "@reforge-com/react" {
        export interface FrontEndConfigurationAccessor {
          // No types generated
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationAccessor = FrontEndConfigurationAccessor;
      }
      ` + '\n',
      )
    })

    it('should generate type definitions for configs and feature flags, not schema, empty configurations, or non-client configs', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'config1',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'CONFIG',
            key: 'emptyConfig',
            rows: [],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'CONFIG',
            key: 'nonClientConfig',
            rows: [],
            sendToClientSdk: false,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'flag1',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'emptyFlag',
            rows: [],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
          {
            configType: 'SCHEMA',
            key: 'schema1',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.declarationGenerate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import "@reforge-com/javascript";
      // prettier-ignore
      import "@reforge-com/react";

      // prettier-ignore
      declare module "@reforge-com/javascript" {
        export interface FrontEndConfigurationRaw {
          "config1": string
          "flag1": boolean
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationRaw = FrontEndConfigurationRaw;
      }

      // prettier-ignore
      declare module "@reforge-com/react" {
        export interface FrontEndConfigurationAccessor {
          "config1": string
          "flag1": boolean
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationAccessor = FrontEndConfigurationAccessor;
      }
      ` + '\n',
      )
    })

    it('should generate function accessor methods for function configs', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'config1',
            rows: [{values: [{value: {string: 'Hello, {{name}}!'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.declarationGenerate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import "@reforge-com/javascript";
      // prettier-ignore
      import "@reforge-com/react";

      // prettier-ignore
      declare module "@reforge-com/javascript" {
        export interface FrontEndConfigurationRaw {
          "config1": string | undefined
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationRaw = FrontEndConfigurationRaw;
      }

      // prettier-ignore
      declare module "@reforge-com/react" {
        export interface FrontEndConfigurationAccessor {
          "config1": (...params: [{ "name": string }]) => string
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationAccessor = FrontEndConfigurationAccessor;
      }
      ` + '\n',
      )
    })

    it('should generate durations correctly', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'config1',
            rows: [{values: [{value: {int: 1}}]}],
            sendToClientSdk: true,
            valueType: 'DURATION',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.declarationGenerate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import "@reforge-com/javascript";
      // prettier-ignore
      import "@reforge-com/react";

      // prettier-ignore
      declare module "@reforge-com/javascript" {
        export interface FrontEndConfigurationRaw {
          "config1": { "ms": number; "seconds": number }
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationRaw = FrontEndConfigurationRaw;
      }

      // prettier-ignore
      declare module "@reforge-com/react" {
        export interface FrontEndConfigurationAccessor {
          "config1": { "ms": number; "seconds": number }
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationAccessor = FrontEndConfigurationAccessor;
      }
      ` + '\n',
      )
    })

    it('should prefix method names with underscore when they start with a digit', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: '1config',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: '1flag',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.declarationGenerate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import "@reforge-com/javascript";
      // prettier-ignore
      import "@reforge-com/react";

      // prettier-ignore
      declare module "@reforge-com/javascript" {
        export interface FrontEndConfigurationRaw {
          "1config": string
          "1flag": boolean
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationRaw = FrontEndConfigurationRaw;
      }

      // prettier-ignore
      declare module "@reforge-com/react" {
        export interface FrontEndConfigurationAccessor {
          "1config": string
          "1flag": boolean
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationAccessor = FrontEndConfigurationAccessor;
      }
      ` + '\n',
      )
    })

    it('should properly camelCase various key formats', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'snake_case_key',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'kebab-case-key',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
          {
            configType: 'CONFIG',
            key: 'dot.notation.key',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'UPPER_CASE_KEY',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
          {
            configType: 'CONFIG',
            key: 'key_with_$_special',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'key/with/slashes',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.declarationGenerate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import "@reforge-com/javascript";
      // prettier-ignore
      import "@reforge-com/react";

      // prettier-ignore
      declare module "@reforge-com/javascript" {
        export interface FrontEndConfigurationRaw {
          "dot.notation.key": string
          "kebab-case-key": boolean
          "key_with_$_special": string
          "key/with/slashes": boolean
          "snake_case_key": string
          "UPPER_CASE_KEY": boolean
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationRaw = FrontEndConfigurationRaw;
      }

      // prettier-ignore
      declare module "@reforge-com/react" {
        export interface FrontEndConfigurationAccessor {
          "dot.notation.key": string
          "kebab-case-key": boolean
          "key_with_$_special": string
          "key/with/slashes": boolean
          "snake_case_key": string
          "UPPER_CASE_KEY": boolean
        }

        // Force TypedFrontEndConfigurationRaw to always use our merged interface
        export type TypedFrontEndConfigurationAccessor = FrontEndConfigurationAccessor;
      }
      ` + '\n',
      )
    })
  })

  describe('generate', () => {
    it('should generate basic code structure when no configs exist', () => {
      const generator = new ReactTypeScriptGenerator({
        configFile: defaultMockConfigFile,
        log: mockLog,
      })

      const result = generator.generate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import { Reforge, TypedFrontEndConfigurationRaw } from "@reforge-com/javascript"
      // prettier-ignore
      import { createReforgeHook, TypedFrontEndConfigurationAccessor } from "@reforge-com/react"
      // prettier-ignore
      // No additional dependencies required

      // prettier-ignore
      export class ReforgeTypesafeReact {
        constructor(public reforge: Reforge) { }

        get<K extends keyof TypedFrontEndConfigurationRaw>(key: K): TypedFrontEndConfigurationRaw[K] {
          return this.reforge.get(key) as TypedFrontEndConfigurationRaw[K]
        }

        // No methods generated
      }

      // prettier-ignore
      export const useReforge = createReforgeHook(ReforgeTypesafeReact)
      ` + '\n',
      )
    })

    it('should include Mustache import when function configs exist', () => {
      // Use mustache syntax for the template to ensure a function is generated
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'some-key',
            rows: [{values: [{value: {string: 'Hello, {{name}}!'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
        ],
      }
      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.generate()

      // Verify Mustache import is included
      expect(result).to.include("import Mustache from 'mustache'")
    })

    it('should generate type definitions for configs and feature flags, not schema, empty configurations, or non-client configs', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'config1',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'CONFIG',
            key: 'emptyConfig',
            rows: [],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'CONFIG',
            key: 'nonClientConfig',
            rows: [],
            sendToClientSdk: false,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'flag1',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'emptyFlag',
            rows: [],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
          {
            configType: 'SCHEMA',
            key: 'schema1',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.generate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import { Reforge, TypedFrontEndConfigurationRaw } from "@reforge-com/javascript"
      // prettier-ignore
      import { createReforgeHook, TypedFrontEndConfigurationAccessor } from "@reforge-com/react"
      // prettier-ignore
      // No additional dependencies required

      // prettier-ignore
      export class ReforgeTypesafeReact {
        constructor(public reforge: Reforge) { }

        get<K extends keyof TypedFrontEndConfigurationRaw>(key: K): TypedFrontEndConfigurationRaw[K] {
          return this.reforge.get(key) as TypedFrontEndConfigurationRaw[K]
        }

        get config1(): TypedFrontEndConfigurationAccessor['config1'] {
          return this.get('config1')
        }

        get flag1(): TypedFrontEndConfigurationAccessor['flag1'] {
          return this.get('flag1')
        }
      }

      // prettier-ignore
      export const useReforge = createReforgeHook(ReforgeTypesafeReact)
      ` + '\n',
      )
    })

    it('should generate function accessor methods for function configs', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'config1',
            rows: [{values: [{value: {string: 'Hello, {{name}}!'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.generate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import { Reforge, TypedFrontEndConfigurationRaw } from "@reforge-com/javascript"
      // prettier-ignore
      import { createReforgeHook, TypedFrontEndConfigurationAccessor } from "@reforge-com/react"
      // prettier-ignore
      import Mustache from 'mustache'

      // prettier-ignore
      export class ReforgeTypesafeReact {
        constructor(public reforge: Reforge) { }

        get<K extends keyof TypedFrontEndConfigurationRaw>(key: K): TypedFrontEndConfigurationRaw[K] {
          return this.reforge.get(key) as TypedFrontEndConfigurationRaw[K]
        }

        config1(): TypedFrontEndConfigurationAccessor['config1'] {
          const raw = this.get('config1')
          return (params) => Mustache.render(raw ?? "", params)
        }
      }

      // prettier-ignore
      export const useReforge = createReforgeHook(ReforgeTypesafeReact)
      ` + '\n',
      )
    })

    it('should generate durations correctly', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'config1',
            rows: [{values: [{value: {int: 1}}]}],
            sendToClientSdk: true,
            valueType: 'DURATION',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.generate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import { Reforge, TypedFrontEndConfigurationRaw } from "@reforge-com/javascript"
      // prettier-ignore
      import { createReforgeHook, TypedFrontEndConfigurationAccessor } from "@reforge-com/react"
      // prettier-ignore
      // No additional dependencies required

      // prettier-ignore
      export class ReforgeTypesafeReact {
        constructor(public reforge: Reforge) { }

        get<K extends keyof TypedFrontEndConfigurationRaw>(key: K): TypedFrontEndConfigurationRaw[K] {
          return this.reforge.get(key) as TypedFrontEndConfigurationRaw[K]
        }

        get config1(): TypedFrontEndConfigurationAccessor['config1'] {
          return this.get('config1')
        }
      }

      // prettier-ignore
      export const useReforge = createReforgeHook(ReforgeTypesafeReact)
      ` + '\n',
      )
    })

    it('should prefix method names with underscore when they start with a digit', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: '1config',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: '1flag',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.generate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import { Reforge, TypedFrontEndConfigurationRaw } from "@reforge-com/javascript"
      // prettier-ignore
      import { createReforgeHook, TypedFrontEndConfigurationAccessor } from "@reforge-com/react"
      // prettier-ignore
      // No additional dependencies required

      // prettier-ignore
      export class ReforgeTypesafeReact {
        constructor(public reforge: Reforge) { }

        get<K extends keyof TypedFrontEndConfigurationRaw>(key: K): TypedFrontEndConfigurationRaw[K] {
          return this.reforge.get(key) as TypedFrontEndConfigurationRaw[K]
        }

        get _1Config(): TypedFrontEndConfigurationAccessor['1config'] {
          return this.get('1config')
        }

        get _1Flag(): TypedFrontEndConfigurationAccessor['1flag'] {
          return this.get('1flag')
        }
      }

      // prettier-ignore
      export const useReforge = createReforgeHook(ReforgeTypesafeReact)
      ` + '\n',
      )
    })

    it('should properly camelCase various key formats', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'snake_case_key',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'kebab-case-key',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
          {
            configType: 'CONFIG',
            key: 'dot.notation.key',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'UPPER_CASE_KEY',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
          {
            configType: 'CONFIG',
            key: 'key_with_$_special',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'FEATURE_FLAG',
            key: 'key/with/slashes',
            rows: [{values: [{value: {bool: true}}]}],
            sendToClientSdk: true,
            valueType: 'BOOL',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      const result = generator.generate()

      expect(result).to.equal(
        stripIndent`
      /* eslint-disable */
      // AUTOGENERATED by reforge-cli's 'gen' command
      // prettier-ignore
      import { Reforge, TypedFrontEndConfigurationRaw } from "@reforge-com/javascript"
      // prettier-ignore
      import { createReforgeHook, TypedFrontEndConfigurationAccessor } from "@reforge-com/react"
      // prettier-ignore
      // No additional dependencies required

      // prettier-ignore
      export class ReforgeTypesafeReact {
        constructor(public reforge: Reforge) { }

        get<K extends keyof TypedFrontEndConfigurationRaw>(key: K): TypedFrontEndConfigurationRaw[K] {
          return this.reforge.get(key) as TypedFrontEndConfigurationRaw[K]
        }

        get dotNotationKey(): TypedFrontEndConfigurationAccessor['dot.notation.key'] {
          return this.get('dot.notation.key')
        }

        get kebabCaseKey(): TypedFrontEndConfigurationAccessor['kebab-case-key'] {
          return this.get('kebab-case-key')
        }

        get keyWithSpecial(): TypedFrontEndConfigurationAccessor['key_with_$_special'] {
          return this.get('key_with_$_special')
        }

        get keyWithSlashes(): TypedFrontEndConfigurationAccessor['key/with/slashes'] {
          return this.get('key/with/slashes')
        }

        get snakeCaseKey(): TypedFrontEndConfigurationAccessor['snake_case_key'] {
          return this.get('snake_case_key')
        }

        get upperCaseKey(): TypedFrontEndConfigurationAccessor['UPPER_CASE_KEY'] {
          return this.get('UPPER_CASE_KEY')
        }
      }

      // prettier-ignore
      export const useReforge = createReforgeHook(ReforgeTypesafeReact)
      ` + '\n',
      )
    })

    it('should throw an error when method names conflict', () => {
      const mockConfigFile: ConfigFile = {
        configs: [
          {
            configType: 'CONFIG',
            key: 'keyWithSlashes',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
          {
            configType: 'CONFIG',
            key: 'key/with/slashes',
            rows: [{values: [{value: {string: 'Some value'}}]}],
            sendToClientSdk: true,
            valueType: 'STRING',
          },
        ],
      }

      const generator = new ReactTypeScriptGenerator({
        configFile: mockConfigFile,
        log: mockLog,
      })

      expect(() => generator.generate()).to.throw(
        "Method 'keyWithSlashes' is already registered. Reforge key keyWithSlashes conflicts with 'key/with/slashes'!",
      )
    })
  })
})
